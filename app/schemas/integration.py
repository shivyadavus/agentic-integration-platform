"""
Pydantic schemas for integration API endpoints.
"""

from datetime import datetime
from typing import Any, Dict, List, Optional
from uuid import UUID

from pydantic import BaseModel, Field

from app.models.integration import IntegrationStatus, IntegrationType


class IntegrationCreate(BaseModel):
    """Schema for creating a new integration."""
    name: str = Field(..., description="Human-readable name for the integration")
    natural_language_spec: str = Field(
        ..., 
        description="Natural language description of what the integration should do",
        example="Connect Salesforce to our billing system and sync customer data when accounts are created"
    )
    integration_type: IntegrationType = Field(
        default=IntegrationType.API_PROXY,
        description="Type of integration to create"
    )
    status: Optional[IntegrationStatus] = Field(
        default=IntegrationStatus.DRAFT,
        description="Initial status of the integration"
    )


class IntegrationUpdate(BaseModel):
    """Schema for updating an existing integration."""
    name: Optional[str] = None
    natural_language_spec: Optional[str] = None
    status: Optional[IntegrationStatus] = None


class IntegrationResponse(BaseModel):
    """Schema for integration API responses."""
    id: UUID
    name: str
    natural_language_spec: str
    status: IntegrationStatus
    integration_type: IntegrationType
    ai_model_used: Optional[str] = None
    ai_provider: Optional[str] = None
    generated_code: Optional[str] = None
    metadata: Optional[Dict[str, Any]] = None
    created_at: datetime
    updated_at: datetime

    class Config:
        from_attributes = True

    @classmethod
    def from_orm(cls, obj):
        """Custom from_orm method to handle metadata field properly."""
        # Get the metadata from the model's get_metadata method if available
        metadata = {}
        if hasattr(obj, 'get_metadata'):
            metadata = obj.get_metadata()
        elif hasattr(obj, 'metadata_') and obj.metadata_:
            import json
            try:
                metadata = json.loads(obj.metadata_) if obj.metadata_ else {}
            except (json.JSONDecodeError, TypeError):
                metadata = {}

        # Handle None timestamps (for legacy records)
        from datetime import datetime, timezone
        now = datetime.now(timezone.utc)
        created_at = obj.created_at if obj.created_at is not None else now
        updated_at = obj.updated_at if obj.updated_at is not None else now

        # Create the response object
        data = {
            'id': obj.id,
            'name': obj.name,
            'natural_language_spec': obj.natural_language_spec,
            'status': obj.status,
            'integration_type': obj.integration_type,
            'ai_model_used': obj.ai_model_used,
            'ai_provider': obj.ai_provider,
            'generated_code': obj.generated_code,
            'metadata': metadata,
            'created_at': created_at,
            'updated_at': updated_at,
        }

        return cls(**data)


class IntegrationPlanRequest(BaseModel):
    """Schema for requesting an integration plan."""
    source_system_type: str = Field(
        ..., 
        description="Type of source system (e.g., 'salesforce', 'crm', 'database')",
        example="salesforce"
    )
    target_system_type: str = Field(
        ..., 
        description="Type of target system (e.g., 'billing', 'erp', 'warehouse')",
        example="billing_system"
    )
    estimated_complexity: Optional[str] = Field(
        default="medium",
        description="Estimated complexity level",
        example="medium"
    )
    additional_requirements: Optional[str] = Field(
        None,
        description="Additional requirements or modifications",
        example="Include tax calculations and handle multiple currencies"
    )


class IntegrationPlanResponse(BaseModel):
    """Schema for integration plan responses."""
    integration_id: UUID
    plan: str = Field(..., description="Detailed integration plan generated by AI")
    similar_patterns: List[Dict[str, Any]] = Field(
        default_factory=list,
        description="Similar patterns found in knowledge base"
    )
    recommendations: str = Field(..., description="AI recommendations for implementation")
    estimated_complexity: str = Field(..., description="Estimated complexity level")


class DeploymentRequest(BaseModel):
    """Schema for deployment requests."""
    environment: str = Field(
        default="staging",
        description="Target deployment environment",
        example="production"
    )
    configuration: Optional[Dict[str, Any]] = Field(
        default_factory=dict,
        description="Environment-specific configuration"
    )
    auto_approve: bool = Field(
        default=False,
        description="Whether to auto-approve the deployment"
    )


class DeploymentResponse(BaseModel):
    """Schema for deployment responses."""
    integration_id: UUID
    status: str = Field(..., description="Deployment status")
    environment: str = Field(..., description="Deployed environment")
    deployment_url: Optional[str] = Field(None, description="URL where integration is deployed")
    generated_code: Optional[str] = Field(None, description="Generated integration code")
    deployment_logs: Optional[List[str]] = Field(
        default_factory=list,
        description="Deployment logs and messages"
    )
