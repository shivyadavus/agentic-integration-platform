[tool.poetry]
name = "agentic-integration-platform"
version = "2.0.0"
description = "Production-grade AI-powered integration platform implementing the agentic integration paradigm"
authors = ["Shiv Yadav <shiv@example.com>"]
license = "MIT"
readme = "README.md"
homepage = "https://github.com/company/agentic-integration-platform"
repository = "https://github.com/company/agentic-integration-platform"
documentation = "https://agentic-integration-platform.readthedocs.io"
keywords = ["ai", "integration", "llm", "anthropic", "openai", "knowledge-graph", "mcp"]
classifiers = [
    "Development Status :: 5 - Production/Stable",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3.12",
    "Topic :: Software Development :: Libraries :: Python Modules",
    "Topic :: Scientific/Engineering :: Artificial Intelligence",
]
packages = [{include = "app"}]

[tool.poetry.dependencies]
python = "^3.12"

# Core Framework
fastapi = "^0.110.0"
uvicorn = {extras = ["standard"], version = "^0.27.0"}
pydantic = "^2.6.1"
pydantic-settings = "^2.1.0"

# AI & LLM Integration
anthropic = "^0.18.0"
openai = "^1.12.0"
tiktoken = "^0.6.0"

# Knowledge Graph & Vector Database
neo4j = "^5.17.0"
networkx = "^3.2.1"
qdrant-client = "^1.7.3"
numpy = "^1.26.4"
pandas = "^2.2.1"

# Database
asyncpg = "^0.29.0"
sqlalchemy = "^2.0.27"
alembic = "^1.13.1"
redis = "^5.0.1"

# HTTP & WebSocket
httpx = "^0.27.0"
websockets = "^12.0"
aiofiles = "^23.2.1"

# Security & Authentication
python-jose = {extras = ["cryptography"], version = "^3.3.0"}
passlib = {extras = ["bcrypt"], version = "^1.7.4"}
python-multipart = "^0.0.9"

# Observability & Monitoring
opentelemetry-api = "^1.22.0"
opentelemetry-sdk = "^1.22.0"
prometheus-client = "^0.20.0"
structlog = "^24.1.0"

# Utilities
tenacity = "^8.2.3"
python-dotenv = "^1.0.1"
click = "^8.1.7"
rich = "^13.7.1"
typer = "^0.9.0"
opentelemetry-instrumentation-fastapi = "^0.56b0"

[tool.poetry.extras]
ml = ["torch", "sentence-transformers", "scikit-learn"]

[tool.poetry.group.dev.dependencies]
# Testing
pytest = "^8.0.2"
pytest-asyncio = "^0.23.5"
pytest-cov = "^4.0.0"
pytest-mock = "^3.12.0"
respx = "^0.20.0"
factory-boy = "^3.3.0"

# Code Quality
black = "^24.2.0"
ruff = "^0.2.2"
mypy = "^1.8.0"
pre-commit = "^3.6.2"
bandit = "^1.7.7"

# Development Tools
ipython = "^8.21.0"
jupyter = "^1.0.0"
python-dotenv = "^1.0.1"

# Type Stubs
types-redis = "^4.6.0.20240218"
types-requests = "^2.31.0.20240218"
pytest-timeout = "^2.4.0"

[tool.poetry.scripts]
agentic = "app.cli:main"
migrate = "app.database.migrations:run_migrations"

[build-system]
requires = ["poetry-core"]
build-backend = "poetry.core.masonry.api"

# Black configuration
[tool.black]
line-length = 100
target-version = ['py312']
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | build
  | dist
)/
'''

# Ruff configuration
[tool.ruff]
target-version = "py312"
line-length = 100
select = [
    "E",  # pycodestyle errors
    "W",  # pycodestyle warnings
    "F",  # pyflakes
    "I",  # isort
    "B",  # flake8-bugbear
    "C4", # flake8-comprehensions
    "UP", # pyupgrade
    "ARG001", # unused-function-args
    "C901", # too-complex
    "SIM", # flake8-simplify
    "TCH", # flake8-type-checking
    "TID", # flake8-tidy-imports
    "Q", # flake8-quotes
    "FLY", # flynt
    "PERF", # perflint
    "RUF", # ruff-specific rules
]
ignore = [
    "E501",  # line too long, handled by black
    "B008",  # do not perform function calls in argument defaults
    "C901",  # too complex
    "W191",  # indentation contains tabs
]

[tool.ruff.pyupgrade]
keep-runtime-typing = true

# MyPy configuration
[tool.mypy]
python_version = "3.12"
check_untyped_defs = true
disallow_any_generics = true
disallow_incomplete_defs = true
disallow_untyped_defs = true
no_implicit_optional = true
no_implicit_reexport = true
show_error_codes = true
strict_equality = true
warn_redundant_casts = true
warn_return_any = true
warn_unreachable = true
warn_unused_configs = true
warn_unused_ignores = true

[[tool.mypy.overrides]]
module = [
    "networkx.*",
    "qdrant_client.*",
    "sentence_transformers.*",
    "anthropic.*",
    "openai.*",
]
ignore_missing_imports = true

# Pytest configuration
[tool.pytest.ini_options]
minversion = "6.0"
addopts = "-ra -q --strict-markers --strict-config"
testpaths = ["tests"]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
    "unit: marks tests as unit tests",
]

# Coverage configuration
[tool.coverage.run]
source = ["app"]
omit = [
    "*/tests/*",
    "*/migrations/*",
    "*/venv/*",
    "*/__pycache__/*",
    "*/site-packages/*",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]